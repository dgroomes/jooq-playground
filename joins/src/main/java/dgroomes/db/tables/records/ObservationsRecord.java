/*
 * This file is generated by jOOQ.
 */
package dgroomes.db.tables.records;


import dgroomes.db.tables.Observations;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ObservationsRecord extends UpdatableRecordImpl<ObservationsRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>observations.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>observations.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>observations.observation</code>.
     */
    public void setObservation(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>observations.observation</code>.
     */
    public String getObservation() {
        return (String) get(1);
    }

    /**
     * Setter for <code>observations.type</code>.
     */
    public void setType(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>observations.type</code>.
     */
    public Integer getType() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Observations.OBSERVATIONS.ID;
    }

    @Override
    public Field<String> field2() {
        return Observations.OBSERVATIONS.OBSERVATION;
    }

    @Override
    public Field<Integer> field3() {
        return Observations.OBSERVATIONS.TYPE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getObservation();
    }

    @Override
    public Integer component3() {
        return getType();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getObservation();
    }

    @Override
    public Integer value3() {
        return getType();
    }

    @Override
    public ObservationsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ObservationsRecord value2(String value) {
        setObservation(value);
        return this;
    }

    @Override
    public ObservationsRecord value3(Integer value) {
        setType(value);
        return this;
    }

    @Override
    public ObservationsRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ObservationsRecord
     */
    public ObservationsRecord() {
        super(Observations.OBSERVATIONS);
    }

    /**
     * Create a detached, initialised ObservationsRecord
     */
    public ObservationsRecord(Integer id, String observation, Integer type) {
        super(Observations.OBSERVATIONS);

        setId(id);
        setObservation(observation);
        setType(type);
    }

    /**
     * Create a detached, initialised ObservationsRecord
     */
    public ObservationsRecord(dgroomes.db.tables.pojos.Observations value) {
        super(Observations.OBSERVATIONS);

        if (value != null) {
            setId(value.getId());
            setObservation(value.getObservation());
            setType(value.getType());
        }
    }
}
