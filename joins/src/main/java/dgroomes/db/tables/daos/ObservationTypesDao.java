/*
 * This file is generated by jOOQ.
 */
package dgroomes.db.tables.daos;


import dgroomes.db.tables.ObservationTypes;
import dgroomes.db.tables.records.ObservationTypesRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ObservationTypesDao extends DAOImpl<ObservationTypesRecord, dgroomes.db.tables.pojos.ObservationTypes, Integer> {

    /**
     * Create a new ObservationTypesDao without any configuration
     */
    public ObservationTypesDao() {
        super(ObservationTypes.OBSERVATION_TYPES, dgroomes.db.tables.pojos.ObservationTypes.class);
    }

    /**
     * Create a new ObservationTypesDao with an attached configuration
     */
    public ObservationTypesDao(Configuration configuration) {
        super(ObservationTypes.OBSERVATION_TYPES, dgroomes.db.tables.pojos.ObservationTypes.class, configuration);
    }

    @Override
    public Integer getId(dgroomes.db.tables.pojos.ObservationTypes object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dgroomes.db.tables.pojos.ObservationTypes> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ObservationTypes.OBSERVATION_TYPES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<dgroomes.db.tables.pojos.ObservationTypes> fetchById(Integer... values) {
        return fetch(ObservationTypes.OBSERVATION_TYPES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public dgroomes.db.tables.pojos.ObservationTypes fetchOneById(Integer value) {
        return fetchOne(ObservationTypes.OBSERVATION_TYPES.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<dgroomes.db.tables.pojos.ObservationTypes> fetchOptionalById(Integer value) {
        return fetchOptional(ObservationTypes.OBSERVATION_TYPES.ID, value);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dgroomes.db.tables.pojos.ObservationTypes> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(ObservationTypes.OBSERVATION_TYPES.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<dgroomes.db.tables.pojos.ObservationTypes> fetchByDescription(String... values) {
        return fetch(ObservationTypes.OBSERVATION_TYPES.DESCRIPTION, values);
    }
}
