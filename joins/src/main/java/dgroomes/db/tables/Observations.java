/*
 * This file is generated by jOOQ.
 */
package dgroomes.db.tables;


import dgroomes.db.DefaultSchema;
import dgroomes.db.Keys;
import dgroomes.db.tables.records.ObservationsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Observations extends TableImpl<ObservationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>observations</code>
     */
    public static final Observations OBSERVATIONS = new Observations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ObservationsRecord> getRecordType() {
        return ObservationsRecord.class;
    }

    /**
     * The column <code>observations.id</code>.
     */
    public final TableField<ObservationsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>observations.observation</code>.
     */
    public final TableField<ObservationsRecord, String> OBSERVATION = createField(DSL.name("observation"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>observations.type</code>.
     */
    public final TableField<ObservationsRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false), this, "");

    private Observations(Name alias, Table<ObservationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Observations(Name alias, Table<ObservationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>observations</code> table reference
     */
    public Observations(String alias) {
        this(DSL.name(alias), OBSERVATIONS);
    }

    /**
     * Create an aliased <code>observations</code> table reference
     */
    public Observations(Name alias) {
        this(alias, OBSERVATIONS);
    }

    /**
     * Create a <code>observations</code> table reference
     */
    public Observations() {
        this(DSL.name("observations"), null);
    }

    public <O extends Record> Observations(Table<O> child, ForeignKey<O, ObservationsRecord> key) {
        super(child, key, OBSERVATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ObservationsRecord> getPrimaryKey() {
        return Keys.OBSERVATIONS__PK_OBSERVATIONS;
    }

    @Override
    public List<ForeignKey<ObservationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OBSERVATIONS__FK_OBSERVATIONS_PK_OBSERVATION_TYPES);
    }

    private transient ObservationTypes _observationTypes;

    /**
     * Get the implicit join path to the <code>observation_types</code> table.
     */
    public ObservationTypes observationTypes() {
        if (_observationTypes == null)
            _observationTypes = new ObservationTypes(this, Keys.OBSERVATIONS__FK_OBSERVATIONS_PK_OBSERVATION_TYPES);

        return _observationTypes;
    }

    @Override
    public Observations as(String alias) {
        return new Observations(DSL.name(alias), this);
    }

    @Override
    public Observations as(Name alias) {
        return new Observations(alias, this);
    }

    @Override
    public Observations as(Table<?> alias) {
        return new Observations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Observations rename(String name) {
        return new Observations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Observations rename(Name name) {
        return new Observations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Observations rename(Table<?> name) {
        return new Observations(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
